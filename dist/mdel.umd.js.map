{"version":3,"file":"mdel.umd.js","sources":["../src/utils/helper.ts","../src/utils/observe.ts","../src/module/store.ts","../src/module/model.ts","../src/type.ts"],"sourcesContent":["/**\n * 判断是否是对象\n * @param data {*} 待检测的数据\n * @return {boolean}\n */\nexport function isObject(data: any): boolean {\n    return Object.prototype.toString.call(data) === '[object Object]';\n}\n\n/**\n * 抛出异常\n * @param message {string} 错误信息\n * @param name {string} 标识\n */\nexport function throwError(message: string, name = 'mdel'): never {\n    throw new Error(name + ':' + message)\n}\n\n/**\n * 绑定this\n * @param target {Object} 目标\n * @param thisArg {*} this值\n * @return {Object}\n */\nexport function bindThis<T extends {\n    [index: string]: (...args: any[]) => any\n}>(target: T, thisArg: any): T {\n    const result = {} as T;\n\n    Object.keys(target).forEach((key) => {\n        (result as any)[key] = target[key].bind(thisArg)\n    });\n\n    return result;\n}\n","import {Store, StoreData, StoreObserver} from \"../type\";\n\nexport class Observable {\n    observes: StoreObserver<any>[] = [];\n\n    addObserver(observer: StoreObserver<any>) {\n        this.removeObserver(observer);\n        this.observes.push(observer);\n    }\n\n    removeObserver(observer: StoreObserver<any>) {\n        this.observes = this.observes.filter(item => item !== observer);\n    }\n\n    notifyObservers(store: Store<any>, data: StoreData) {\n        const observes = [...this.observes];\n\n        observes.forEach(observer => observer.call(store, data));\n    }\n}\n","import {isObject, throwError} from \"../utils/helper\";\nimport {ConvertData, PickModelData, Store, StoreCore, StoreData} from \"../type\";\nimport {Observable} from \"../utils/observe\";\n\nfunction convertData<S extends Store<any>>(store: S): ConvertData<S> {\n  const data = getStoreData(store as any);\n\n  function findData(target: any) {\n    if (target && target.core && target.core.isStore) {\n      // @ts-ignore\n      return convertData(target);\n    } else if (isObject(target)) {\n      return Object.keys(target).reduce((previousValue, currentValue) => {\n        previousValue[currentValue] = findData(target[currentValue]);\n\n        return previousValue;\n      }, {});\n    } else if (Array.isArray(target)) {\n      return target.map(item => findData(item));\n    }\n\n    return target;\n  }\n\n  return findData(data);\n}\n\nexport function checkData(data: any) {\n    if (!isObject(data)) {\n        throwError('data is not a object');\n    }\n\n    if (data.core) {\n        throwError('data cannot have core property');\n    }\n\n    if (data.actions) {\n        throwError('data cannot have core property');\n    }\n}\n\nexport function getStoreData<D extends StoreData, S extends Store<D>>(store: S): PickModelData<D> {\n    const {core, actions, ...data} = store;\n\n    return data as PickModelData<D>;\n}\n\nexport class BaseStore implements Store<{}> {\n  core: { __observable: Observable } & StoreCore<any, any> = {\n    isStore: true,\n    setData: (data) => {\n      checkData(data);\n\n      const previousData = getStoreData(this);\n      (<any>Object).assign(this, data)\n      this.core.__observable.notifyObservers(this, previousData);\n    },\n    convertData: () => {\n      return convertData(this);\n    },\n    observe: (observer) => {\n      this.core.__observable.addObserver(observer);\n      return () => this.core.__observable.removeObserver(observer);\n    },\n    //需子类实现\n    resetData: () => {\n    },\n    //需子类实现\n    baseActions: {},\n\n    __observable: new Observable()\n  }\n  actions: {}\n}\n","import {CreateModelInitiator, Model as ModelType} from \"../type\";\nimport {bindThis, isObject, throwError} from \"../utils/helper\";\nimport {BaseStore, checkData, getStoreData} from \"./store\";\n\ninterface ModelOptions {\n  //来自继承\n  sourceExtend?: boolean\n}\n\nfunction createSingleModel<M extends ModelType<any>>(model: M): M {\n  let store;\n\n  return function SingleModel(...args) {\n    return store || (store = new (model as any)(...args));\n  } as unknown as M;\n}\n\nexport function createModel(initiator: CreateModelInitiator<any, any, any>): ModelType<any> {\n  //检查数据\n  if (!isObject(initiator)) {\n    throwError('initiator is not a object');\n  }\n  if (typeof initiator.data !== 'function') {\n    throwError('initiator.data is not a function');\n  }\n  if (initiator.actions && !isObject(initiator.actions)) {\n    throwError('initiator.actions is not a object');\n  }\n  if (initiator.base && !initiator.base.isModel) {\n    throwError('initiator.conn is not a Model');\n  }\n\n  const Base: { new(options?: ModelOptions): BaseStore } = (initiator.base || BaseStore);\n\n  if (initiator.single) {\n    const params = Object.assign({}, initiator, {\n      single: false\n    });\n\n    return createSingleModel(createModel(params));\n  }\n\n  return class Model extends Base {\n    static isModel = true;\n\n    constructor() {\n      super(arguments[0] || {sourceExtend: true});\n\n      const options: ModelOptions = arguments[0];\n      const currentData = initiator.data();\n      const currentActions = initiator.actions || {};\n\n      this.core.baseActions = {...this.actions};\n      this.core.resetData = () => {\n        let baseData = {};\n\n        if (initiator.base) {\n          // @ts-ignore\n          baseData = getStoreData(new Base({\n            sourceExtend: true\n          }));\n        }\n\n        this.core.setData({\n          ...baseData,\n          ...initiator.data()\n        })\n      }\n\n      checkData(currentData);\n      (<any>Object).assign(this, currentData);\n      Object.assign(this.actions, bindThis(currentActions, this));\n\n      if (!(options && options.sourceExtend)) {\n        (<any>Object).seal(this);\n        Object.freeze(this.actions);\n        Object.freeze(this.core);\n      }\n    }\n    }\n}\n","export type StoreData = object;\nexport  type StoreObserver<D extends StoreData> = (previousData: D) => void;\nexport  type StoreUnobserve = () => void;\nexport  type StoreObserve<D extends StoreData> = (observer: StoreObserver<D>) => StoreUnobserve;\nexport  type StoreActions = {\n  init?: (...args: any[]) => void;\n  input?: (...args: any[]) => void;\n  output?: () => any;\n} & {\n  [index in PropertyKey]: (...args: any[]) => any;\n};\nexport  type StoreCore<D extends StoreData, BA extends StoreActions> = {\n  isStore: boolean;\n  setData: (data: Partial<D>) => void;\n  convertData: () => ConvertData<D>;\n  resetData: () => void;\n  observe: StoreObserve<D>;\n  baseActions: BA;\n};\nexport  type Store<D extends StoreData, A extends StoreActions = {}, BA extends StoreActions = {}> = {\n  core: StoreCore<D, BA>;\n} & {\n  actions: A;\n} & D;\nexport  type Model<D extends StoreData, A extends StoreActions = {}, BA extends StoreActions = {}> = {\n  new(): Store<D, A, BA>;\n  isModel: boolean;\n};\nexport  type PickModelStore<M> = M extends new (...args: any[]) => infer P ? P : any;\nexport  type PickModelData<M> = M extends Model<infer D, infer A> ? D : {};\nexport  type PickModelActions<M> = M extends Model<infer D, infer A> ? A : {};\nexport  type PickStoreData<S> = S extends Store<infer D, infer A> ? D : {};\nexport  type PickStoreActions<S> = S extends Store<infer D, infer A> ? A : {};\nexport  type CreateModelInitiator<D extends StoreData, A extends StoreActions = {}, B extends Model<StoreData> | null = null> = {\n  single?: boolean;\n  base?: B;\n  data: () => D;\n  actions?: A & ThisType<Store<D & PickModelData<B>, A & PickModelActions<B>, PickModelActions<B>>>;\n};\nexport  type CreateModel = <D extends StoreData, A extends StoreActions = {}, B extends Model<StoreData> | null = null>(initiator: CreateModelInitiator<D, A, B>) => Model<D & PickModelData<B>, A & PickModelActions<B>, PickModelActions<B>>;\nexport  type ConvertData<D> = ConvertArrayData<ConvertObjectData<ConvertStoreData<D>>>;\ntype ConvertStoreData<S> = S extends Store<infer D> ? ConvertData<D> : S;\ntype ConvertObjectData<O> = O extends object ? {\n  [K in keyof O]: ConvertData<O[K]>;\n} : O;\ntype ConvertArrayData<A> = A extends Array<infer T> ? ConvertData<T>[] : A;\n\nexport const version = '8.0.0';\n"],"names":["isObject","data","Object","prototype","toString","call","throwError","message","name","Error","bindThis","target","thisArg","result","keys","forEach","key","bind","Observable","this","addObserver","observer","removeObserver","observes","push","filter","item","notifyObservers","store","convertData","findData","core","isStore","reduce","previousValue","currentValue","Array","isArray","map","getStoreData","checkData","actions","BaseStore","setData","previousData","_this","assign","__observable","observe","resetData","baseActions","createModel","initiator","base","isModel","model","Base","single","params","arguments","sourceExtend","options","currentData","currentActions","baseData","seal","freeze"],"mappings":"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"}